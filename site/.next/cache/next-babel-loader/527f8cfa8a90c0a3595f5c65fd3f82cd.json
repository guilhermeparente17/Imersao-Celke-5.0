{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\guilh\\\\Documents\\\\imersao_cinco\\\\site\\\\pages\\\\cadastrar.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport { Jumbotron } from 'reactstrap';\n\nfunction Cadastrar() {\n  const {\n    0: meta,\n    1: setMeta\n  } = useState({\n    name: '',\n    description: '',\n    status: ''\n  });\n  const {\n    0: response,\n    1: setResponse\n  } = useState({\n    formSave: false,\n    type: '',\n    message: ''\n  });\n\n  const onChangeInput = e => setMeta(_objectSpread(_objectSpread({}, meta), {}, {\n    [e.target.name]: e.target.value\n  }));\n\n  const sendMeta = async e => {\n    e.preventDefault();\n    console.log(meta);\n    setResponse({\n      formSave: true\n    });\n\n    try {\n      const res = await fetch('http://localhost:8080/metas', {\n        method: 'POST',\n        body: JSON.stringify(meta),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const responseEnv = await res.json();\n\n      if (responseEnv.error) {\n        setResponse({\n          formSave: false,\n          type: 'error',\n          message: responseEnv.message\n        });\n      } else {\n        setResponse({\n          formSave: false,\n          type: 'success',\n          message: responseEnv.message\n        });\n      }\n    } catch (err) {\n      setResponse({\n        formSave: false,\n        type: 'error',\n        message: 'Erro: Meta nao cadastrada com sucesso, tente mais tarde!'\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Jumbotron, {\n        fluid: true,\n        className: \"form\",\n        children: [/*#__PURE__*/_jsxDEV(\"style\", {\n          children: `.form{\n                            background-color: #171941;\n                            color: #bf38ac;\n                            padding-top: 30px;\n                            padding-\n                        }`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Cadastrar minha meta\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), response.type === 'error' ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: response.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 50\n        }, this) : \"\", response.type === 'success' ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: response.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 52\n        }, this) : \"\", /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: sendMeta,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Nome \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"name\",\n            id: \"name\",\n            placeholder: \"Nome da meta\",\n            onChange: onChangeInput\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 25\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 121\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 127\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Descricao \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"description\",\n            id: \"description\",\n            placeholder: \"Descricao da meta\",\n            onChange: onChangeInput\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 25\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 140\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 146\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Status \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"status\",\n            id: \"status\",\n            placeholder: \"Status da meta\",\n            onChange: onChangeInput\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 127\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 133\n          }, this), response.formSave ? /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            disabled: true,\n            children: \"Enviando...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 46\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Cadastrar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 100\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)\n    }, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}\n\nexport default Cadastrar;","map":{"version":3,"sources":["C:/Users/guilh/Documents/imersao_cinco/site/pages/cadastrar.jsx"],"names":["React","useState","Jumbotron","Cadastrar","meta","setMeta","name","description","status","response","setResponse","formSave","type","message","onChangeInput","e","target","value","sendMeta","preventDefault","console","log","res","fetch","method","body","JSON","stringify","headers","responseEnv","json","error","err"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport { Jumbotron } from 'reactstrap'\r\n\r\nfunction Cadastrar() {\r\n    const [meta, setMeta] = useState({\r\n        name: '',\r\n        description: '',\r\n        status: '',\r\n    })\r\n\r\n    const [response, setResponse] = useState({\r\n        formSave: false,\r\n        type: '',\r\n        message: ''\r\n    })\r\n\r\n    const onChangeInput = e => setMeta({ ...meta, [e.target.name]: e.target.value })\r\n\r\n    const sendMeta = async e => {\r\n        e.preventDefault()\r\n        console.log(meta)\r\n\r\n        setResponse({ formSave: true })\r\n        try {\r\n            const res = await fetch('http://localhost:8080/metas', {\r\n                method: 'POST',\r\n                body: JSON.stringify(meta),\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n\r\n            const responseEnv = await res.json()\r\n            if (responseEnv.error) {\r\n                setResponse({\r\n                    formSave: false,\r\n                    type: 'error',\r\n                    message: responseEnv.message\r\n                })\r\n            } else {\r\n                setResponse({\r\n                    formSave: false,\r\n                    type: 'success',\r\n                    message: responseEnv.message\r\n                })\r\n            }\r\n        } catch (err) {\r\n            setResponse({\r\n                formSave: false,\r\n                type: 'error',\r\n                message: 'Erro: Meta nao cadastrada com sucesso, tente mais tarde!'\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <>\r\n                <Jumbotron fluid className=\"form\">\r\n                    <style>\r\n                        {`.form{\r\n                            background-color: #171941;\r\n                            color: #bf38ac;\r\n                            padding-top: 30px;\r\n                            padding-\r\n                        }`}\r\n                    </style>\r\n                    <h1>Cadastrar minha meta</h1>\r\n                    <hr />\r\n\r\n                    {response.type === 'error' ? <p>{response.message}</p> : \"\"}\r\n                    {response.type === 'success' ? <p>{response.message}</p> : \"\"}\r\n\r\n                    <form onSubmit={sendMeta}>\r\n                        <label>Nome </label>\r\n                        <input type=\"text\" name=\"name\" id=\"name\" placeholder=\"Nome da meta\" onChange={onChangeInput} /> <br /><br />\r\n\r\n                        <label>Descricao </label>\r\n                        <input type=\"text\" name=\"description\" id=\"description\" placeholder=\"Descricao da meta\" onChange={onChangeInput} /> <br /><br />\r\n\r\n                        <label>Status </label>\r\n                        <input type=\"text\" name=\"status\" id=\"status\" placeholder=\"Status da meta\" onChange={onChangeInput} /> <br /><br />\r\n\r\n\r\n\r\n                        {response.formSave ? <button type=\"submit\" disabled>Enviando...</button> : <button type=\"submit\">Cadastrar</button>}\r\n                    </form>\r\n                </Jumbotron>\r\n            </>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cadastrar"]},"metadata":{},"sourceType":"module"}